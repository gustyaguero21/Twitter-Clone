1. La aplicación usa una base de datos SQLite para los usuarios y los tweets, pero en un entorno real, se recomienda usar PostgreSQL para datos persistentes y Redis para cache de timelines.
   
2. Se asume que todos los usuarios son válidos y no se requiere autenticación. Se verifica si hay usuarios existentes y cada usuario está identificado por su username.

3. Los tweets son limitados a 280 caracteres. Si el usuario intenta publicar un tweet más largo, se devolverá un error.

4. Ha sido omitido todo tipo de control o verificacion en los controladores, solo manejo de errores.

5. Se utilizo el patron de diseño repository, que permite tener un codigo modular, mantenible y separando la logica de negocio de la interaccion con base de datos. Ademas se utiliza inyeccion de dependendencias.

6. Implementa concurrencia mediante go routines y channels, esto hara que pueda manejar grandes cantidades de solicitudes al tratar de obtener los tweets.

7. Las constantes mas utilizadas, como: queries de sql, puertos, se encuentran en el archivo "constants.go" dentro de "/cmd/config".

8. El manejo de errores se hizo con libreria nativa de go "fmt.Errorf()" para errores en repositorio. Esto facilita el reconocimiento de errores al momento de debuggear. 

9. En services, no se manejaron errores y se devuelven los errores puros.
